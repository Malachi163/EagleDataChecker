{"ast":null,"code":"import _slicedToArray from \"/Users/alexander.rivera@ibm.com/Documents/SoftwareDev/eagle-prime-demo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/alexander.rivera@ibm.com/Documents/SoftwareDev/eagle-prime-demo/src/components/Report.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieDB from '../data/db';\nimport { compareData } from '../data/moviePayload';\nimport { withStyles, Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport styles from './report.styles';\n\nconst Report = props => {\n  const initValue = [{}];\n  const API_TITLE_ENPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&t=\";\n  const API_ID_ENDPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&i=\";\n\n  const _useState = useState(initValue),\n        _useState2 = _slicedToArray(_useState, 2),\n        apiData = _useState2[0],\n        setApiData = _useState2[1]; // Defines the data pulled from IMDB through the batch given\n\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        payloadData = _useState4[0],\n        setPayloadData = _useState4[1]; // Defines the data given through Amazon Payload\n\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        processLog = _useState6[0],\n        setProcessLog = _useState6[1];\n\n  const classes = props.classes;\n  const batch = props.batch;\n\n  const fetchMovieByTitle = async batch => {};\n\n  const fetchMovieById = async (batch, endpoint) => {\n    let response = [];\n    let title = batch[0];\n    console.log(\"Testing batch\", batch[0]); // for (let title of batch) {\n    //     console.log('Movie title being searched: ', title.title);\n    //     console.log('Our initial value is: ', apiData[0]);\n    //     const { data: movie } = await axios.get(`${endpoint}+${title.title}`)\n    //     if (apiData === initValue) {\n    //         apiData.shift();\n    //         console.log(\"Shifting\");\n    //     }\n    //     setApiData([...apiData, movie]);\n    //     compareData(movie, MovieDB);\n    //     console.log(\"Our current state in map\", movie);\n    // }\n\n    console.log('Movie title being searched: ', title.title);\n    console.log('Our initial value is: ', apiData[0]);\n\n    const _ref = await axios.get(\"\".concat(endpoint, \"+\").concat(title.title)),\n          movie = _ref.data;\n\n    if (apiData === initValue) {\n      apiData.shift();\n      console.log(\"Shifting\");\n    }\n\n    setApiData([...apiData, movie]);\n    compareData(movie, MovieDB);\n    console.log(\"Our current state in map\", movie);\n  };\n\n  const processDataComparison = (batch, payload) => {\n    const results = compareData(payload, batch);\n    console.log(\"These are the results from comparison: \", results);\n    return results;\n  };\n\n  const fetchMovieFromPayload = title => {};\n\n  const pushToState = (prevState, newItem) => {};\n\n  const manageDisplay = () => {\n    return React.createElement(React.Fragment, null, React.createElement(Grid, {\n      container: true,\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      lg: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Movie Title\"), React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Positive Matches\"), React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Mismatches\"))), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, apiData.map(listing => React.createElement(TableRow, {\n      key: listing.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, listing.title))))))));\n  };\n\n  useEffect(() => {\n    fetchMovieById(batch, API_TITLE_ENPOINT); // manageDisplay();\n\n    setPayloadData(MovieDB);\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: classes.headerLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Data Processing\"), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"Movie from IMDB: \"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, JSON.stringify(apiData)), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Movie from Payload:\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, JSON.stringify(MovieDB)), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Comparing Data:\"), manageDisplay(), React.createElement(Button, {\n    onClick: () => setProcessLog(processDataComparison(apiData, MovieDB)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Compare\"));\n};\n\nexport default withStyles(styles)(Report);","map":{"version":3,"sources":["/Users/alexander.rivera@ibm.com/Documents/SoftwareDev/eagle-prime-demo/src/components/Report.tsx"],"names":["React","useState","useEffect","axios","MovieDB","compareData","withStyles","Button","Grid","Table","TableBody","TableHead","TableRow","TableCell","styles","Report","props","initValue","API_TITLE_ENPOINT","API_ID_ENDPOINT","apiData","setApiData","payloadData","setPayloadData","processLog","setProcessLog","classes","batch","fetchMovieByTitle","fetchMovieById","endpoint","response","title","console","log","get","movie","data","shift","processDataComparison","payload","results","fetchMovieFromPayload","pushToState","prevState","newItem","manageDisplay","map","listing","headerLabel","JSON","stringify"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport ReportForm from './ReportForm';\nimport axios from 'axios';\nimport MovieDB from '../data/db';\nimport {compareData} from '../data/moviePayload';\nimport {withStyles, Button} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport styles from './report.styles';\n\n\nconst Report = (props:any) => {\n    const initValue = [\n        {}\n    ];\n\n    const API_TITLE_ENPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&t=\";\n    const API_ID_ENDPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&i=\";\n    const [apiData, setApiData] = useState(initValue); // Defines the data pulled from IMDB through the batch given\n    const [payloadData, setPayloadData] = useState(); // Defines the data given through Amazon Payload\n    const [processLog, setProcessLog] = useState();\n    const {classes} = props;\n    const {batch} = props;\n\n    const fetchMovieByTitle = async (batch:any) => {\n\n    }\n\n    const fetchMovieById = async (batch:any, endpoint:string) => {\n        let response: any[] = [];\n        let title = batch[0];\n\n        console.log(\"Testing batch\",batch[0]);\n\n        // for (let title of batch) {\n        //     console.log('Movie title being searched: ', title.title);\n        //     console.log('Our initial value is: ', apiData[0]);\n        //     const { data: movie } = await axios.get(`${endpoint}+${title.title}`)\n\n        //     if (apiData === initValue) {\n        //         apiData.shift();\n        //         console.log(\"Shifting\");\n        //     }\n\n        //     setApiData([...apiData, movie]);\n        //     compareData(movie, MovieDB);\n\n        //     console.log(\"Our current state in map\", movie);\n        // }\n\n        console.log('Movie title being searched: ', title.title);\n        console.log('Our initial value is: ', apiData[0]);\n        const { data: movie } = await axios.get(`${endpoint}+${title.title}`)\n\n        if (apiData === initValue) {\n            apiData.shift();\n            console.log(\"Shifting\");\n        }\n\n        setApiData([...apiData, movie]);\n        compareData(movie, MovieDB);\n\n        console.log(\"Our current state in map\", movie);\n\n    }\n\n    const processDataComparison = (batch:any, payload:any) => {\n        const results = compareData(payload, batch);\n        console.log(\"These are the results from comparison: \", results);\n\n        return results;\n    }\n\n    const fetchMovieFromPayload = (title:string)=> {\n\n    }\n\n    const pushToState = (prevState:any, newItem:any) => {\n\n    } \n\n    const manageDisplay = () => {\n        return(\n            <>\n                <Grid container alignItems=\"center\">\n                    <Grid item lg={6}>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">Movie Title</TableCell>\n                                    <TableCell align=\"left\">Positive Matches</TableCell>\n                                    <TableCell align=\"left\">Mismatches</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {/* {() =>} */}\n                                {apiData.map((listing: any) => (\n                                    <TableRow key={listing.title}>\n                                        <TableCell align=\"left\">{listing.title}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </Grid>\n                </Grid>\n            \n            </>\n        );\n        \n    }\n\n\n    useEffect(() => {\n        fetchMovieById(batch, API_TITLE_ENPOINT);\n        // manageDisplay();\n        setPayloadData(MovieDB);\n    })\n\n    \n    return(\n        <div>\n            <h1 className={classes.headerLabel}>Data Processing</h1>\n            <h3>Movie from IMDB: </h3>\n            <p>{JSON.stringify(apiData)}</p>\n            <br></br>\n            <br></br>\n            <h3>Movie from Payload:</h3>\n            <p>{JSON.stringify(MovieDB)}</p>\n            <br></br>\n            <br></br>\n            <h3>Comparing Data:</h3>\n            {manageDisplay()}\n            <Button onClick={() => setProcessLog(processDataComparison(apiData, MovieDB))}>Compare</Button>\n        </div>\n    );\n}\n\nexport default withStyles(styles)(Report);"]},"metadata":{},"sourceType":"module"}