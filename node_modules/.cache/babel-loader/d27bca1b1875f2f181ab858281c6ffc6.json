{"ast":null,"code":"import _slicedToArray from \"/Users/alexander.rivera@ibm.com/Documents/SoftwareDev/eagle-prime-demo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/alexander.rivera@ibm.com/Documents/SoftwareDev/eagle-prime-demo/src/components/Report.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport ReportForm from './ReportForm';\nimport axios from 'axios';\nimport MovieDB from '../data/db';\nimport { compareData } from '../data/moviePayload';\nimport { withStyles, Button } from '@material-ui/core';\nimport styles from './report.styles';\nconst API_TITLE_ENPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&t=\";\nconst API_ID_ENDPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&i=\";\n\nconst Report = props => {\n  const initValue = [{}];\n\n  const _useState = useState(initValue),\n        _useState2 = _slicedToArray(_useState, 2),\n        apiData = _useState2[0],\n        setApiData = _useState2[1]; // Defines the data pulled from IMDB through the batch given\n\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        payloadData = _useState4[0],\n        setPayloadData = _useState4[1]; // Defines the data given through Amazon Payload\n\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        processLog = _useState6[0],\n        setProcessLog = _useState6[1];\n\n  const classes = props.classes;\n  const batch = props.batch;\n\n  const fetchMovieByTitle = async batch => {}; // const decomposeText = (title:string) => {\n  //     // We look for spaces, and change them to + signs for our api\n  //     console.log('Our original title: ', [...title]);\n  //     const space = \"/\\s/\"; \n  //     let result = '';\n  //     for(let letter of title){\n  //         result += (letter==space) ? \"+\" : letter;\n  //     }\n  //     console.log(\"our new str: \", result);\n  //     return result;\n  // }\n\n\n  const fetchMovieById = async (batch, endpoint) => {\n    let response = [];\n    const movies = batch.map(async title => {\n      console.log('Movie title being searched: ', title.title);\n      console.log('Our initial value is: ', apiData);\n      const res = await axios.get(\"\".concat(endpoint, \"+\").concat(title.title)).then(response => {\n        setApiData([...apiData, response.data]);\n        console.log(\"Finished loading\", response.data);\n        processDataComparison(response.data, MovieDB);\n      }); // Needs to be changed to acommodate for array in apiData\n    });\n    return movies.data;\n  };\n\n  const processDataComparison = (batch, payload) => {\n    const results = compareData(payload, batch);\n    console.log(\"These are the results from comparison: \", results);\n    return results;\n  };\n\n  const fetchMovieFromPayload = title => {};\n\n  const pushToState = (prevState, newItem) => {};\n\n  useEffect(() => {\n    fetchMovieById(batch, API_TITLE_ENPOINT);\n    setPayloadData(MovieDB);\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: classes.headerLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Data Processing\"), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Movie from IMDB: \"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, JSON.stringify(apiData)), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Movie from Payload:\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, JSON.stringify(MovieDB)), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Comparing Data:\"), React.createElement(ReportForm, {\n    batch: apiData,\n    dbFile: payloadData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: () => processDataComparison(apiData, MovieDB),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Compare\"));\n};\n\nexport default withStyles(styles)(Report);","map":{"version":3,"sources":["/Users/alexander.rivera@ibm.com/Documents/SoftwareDev/eagle-prime-demo/src/components/Report.tsx"],"names":["React","useState","useEffect","ReportForm","axios","MovieDB","compareData","withStyles","Button","styles","API_TITLE_ENPOINT","API_ID_ENDPOINT","Report","props","initValue","apiData","setApiData","payloadData","setPayloadData","processLog","setProcessLog","classes","batch","fetchMovieByTitle","fetchMovieById","endpoint","response","movies","map","title","console","log","res","get","then","data","processDataComparison","payload","results","fetchMovieFromPayload","pushToState","prevState","newItem","headerLabel","JSON","stringify"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport ReportForm from './ReportForm';\nimport axios from 'axios';\nimport MovieDB from '../data/db';\nimport {compareData} from '../data/moviePayload';\nimport {withStyles, Button} from '@material-ui/core';\nimport styles from './report.styles';\n\nconst API_TITLE_ENPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&t=\";\nconst API_ID_ENDPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&i=\";\n\nconst Report = (props:any) => {\n    const initValue = [\n        {}\n    ];\n\n    const [apiData, setApiData] = useState(initValue); // Defines the data pulled from IMDB through the batch given\n    const [payloadData, setPayloadData] = useState(); // Defines the data given through Amazon Payload\n    const [processLog, setProcessLog] = useState();\n    const {classes} = props;\n    const {batch} = props;\n\n    const fetchMovieByTitle = async (batch:any) => {\n\n    }\n\n    // const decomposeText = (title:string) => {\n    //     // We look for spaces, and change them to + signs for our api\n    //     console.log('Our original title: ', [...title]);\n    //     const space = \"/\\s/\"; \n    //     let result = '';\n    //     for(let letter of title){\n    //         result += (letter==space) ? \"+\" : letter;\n    //     }\n    //     console.log(\"our new str: \", result);\n    //     return result;\n    // }\n\n    const fetchMovieById = async (batch:any, endpoint:string) => {\n        let response: any[] = [];\n        const movies = batch.map(async (title:any) => {\n            console.log('Movie title being searched: ', title.title);\n            console.log('Our initial value is: ', apiData);\n            const res = await axios.get(`${endpoint}+${title.title}`).then(response => {\n                setApiData([...apiData, response.data]);\n                console.log(\"Finished loading\", response.data);\n                processDataComparison(response.data, MovieDB)\n            }); // Needs to be changed to acommodate for array in apiData\n        })\n        \n        return movies.data;\n    }\n\n    const processDataComparison = (batch:any, payload:any) => {\n        const results = compareData(payload, batch);\n        console.log(\"These are the results from comparison: \", results);\n\n        return results;\n    }\n\n    const fetchMovieFromPayload = (title:string)=> {\n\n    }\n\n    const pushToState = (prevState:any, newItem:any) => {\n\n    } \n\n\n    useEffect(() => {\n       fetchMovieById(batch, API_TITLE_ENPOINT);\n       setPayloadData(MovieDB);\n    }, [])\n\n\n    return(\n        <div>\n            <h1 className={classes.headerLabel}>Data Processing</h1>\n            <h3>Movie from IMDB: </h3>\n            <p>{JSON.stringify(apiData)}</p>\n            <br></br>\n            <br></br>\n            <h3>Movie from Payload:</h3>\n            <p>{JSON.stringify(MovieDB)}</p>\n            <br></br>\n            <br></br>\n            <h3>Comparing Data:</h3>\n            <ReportForm batch={apiData} dbFile={payloadData}/>\n            <Button onClick={() => processDataComparison(apiData, MovieDB)}>Compare</Button>\n        </div>\n    );\n}\n\nexport default withStyles(styles)(Report);"]},"metadata":{},"sourceType":"module"}