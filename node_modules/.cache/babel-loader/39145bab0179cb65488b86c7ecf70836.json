{"ast":null,"code":"import _slicedToArray from \"/Users/alexander.rivera@ibm.com/Documents/SoftwareDev/eagle-prime-demo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/alexander.rivera@ibm.com/Documents/SoftwareDev/eagle-prime-demo/src/components/Report.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieDB from '../data/db';\nimport { compareData } from '../data/moviePayload';\nimport { withStyles, Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Paper from '@material-ui/core/Paper';\nimport styles from './report.styles';\n\nconst Report = props => {\n  const initValue = [{}];\n  const initLog = {\n    positive: [{}],\n    negative: [{}]\n  };\n  const API_TITLE_ENPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&t=\";\n  const API_ID_ENDPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&i=\";\n\n  const _useState = useState(initValue),\n        _useState2 = _slicedToArray(_useState, 2),\n        apiData = _useState2[0],\n        setApiData = _useState2[1]; // Defines the data pulled from IMDB through the batch given\n\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        payloadData = _useState4[0],\n        setPayloadData = _useState4[1]; // Defines the data given through Amazon Payload\n\n\n  const _useState5 = useState(initLog),\n        _useState6 = _slicedToArray(_useState5, 2),\n        processLog = _useState6[0],\n        setProcessLog = _useState6[1];\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        key = _useState8[0],\n        setKey = _useState8[1];\n\n  const classes = props.classes;\n  const batch = props.batch;\n  useEffect(() => {\n    const fetchDataByTitle = async () => {\n      const _ref = await axios.get(\"\".concat(API_TITLE_ENPOINT, \"+\").concat(batch[0].title)),\n            movie = _ref.data;\n\n      if (apiData === initValue) {\n        apiData.shift();\n        console.log(\"Shifting\");\n      }\n\n      setApiData([...apiData, movie]);\n      const res = compareData(movie, MovieDB);\n      setProcessLog(compareData(movie, MovieDB));\n      console.log(\"Our current overall state\", apiData);\n      console.log(\"Our current state in map\", movie);\n      console.log(\"Title is \", batch[0].title);\n      console.log(\"Testing results\", res.positive.length);\n    };\n\n    fetchDataByTitle();\n    setPayloadData(MovieDB);\n  }, []);\n\n  const processDataComparison = (batch, payload) => {\n    const results = compareData(payload, batch);\n    console.log(\"These are the results from comparison: \", results);\n    return results;\n  };\n\n  const manageDisplay = () => {\n    let counter = 1;\n    return React.createElement(React.Fragment, null, React.createElement(Grid, {\n      container: true,\n      alignItems: \"center\",\n      justify: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paperRoot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      lg: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Movie Title\"), React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Positive Matches\"), React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Mismatches\"), React.createElement(TableCell, {\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }))), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, apiData.map((listing, i) => React.createElement(TableRow, {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      align: \"left\",\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, listing.Title), React.createElement(TableCell, {\n      align: \"left\",\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, processLog.positive.length), React.createElement(TableCell, {\n      align: \"left\",\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, processLog.negative.length), React.createElement(TableCell, {\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => console.log(\"inspecting the following: \", listing.imdbID),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Inspect\"))))))))));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: classes.headerLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Data Processing\"), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Movie from IMDB: \"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, JSON.stringify(apiData)), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Movie from Payload:\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, JSON.stringify(MovieDB)), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Comparing Data:\"), manageDisplay());\n};\n\nexport default withStyles(styles)(Report);","map":{"version":3,"sources":["/Users/alexander.rivera@ibm.com/Documents/SoftwareDev/eagle-prime-demo/src/components/Report.tsx"],"names":["React","useState","useEffect","axios","MovieDB","compareData","withStyles","Button","Grid","Table","TableBody","TableHead","TableRow","TableCell","Paper","styles","Report","props","initValue","initLog","positive","negative","API_TITLE_ENPOINT","API_ID_ENDPOINT","apiData","setApiData","payloadData","setPayloadData","processLog","setProcessLog","key","setKey","classes","batch","fetchDataByTitle","get","title","movie","data","shift","console","log","res","length","processDataComparison","payload","results","manageDisplay","counter","paperRoot","map","listing","i","Title","imdbID","headerLabel","JSON","stringify"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport ReportForm from './ReportForm';\nimport axios from 'axios';\nimport MovieDB from '../data/db';\nimport {compareData} from '../data/moviePayload';\nimport {withStyles, Button} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Paper from '@material-ui/core/Paper';\nimport styles from './report.styles';\n\n\nconst Report = (props:any) => {\n    const initValue = [\n        {}\n    ];\n\n    const initLog ={\n        positive:[{}],\n        negative:[{}]\n    }\n\n    const API_TITLE_ENPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&t=\";\n    const API_ID_ENDPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&i=\";\n    const [apiData, setApiData] = useState(initValue); // Defines the data pulled from IMDB through the batch given\n    const [payloadData, setPayloadData] = useState(); // Defines the data given through Amazon Payload\n    const [processLog, setProcessLog] = useState(initLog);\n    const [key, setKey] = useState(0);\n    const {classes} = props;\n    const {batch} = props;\n\n    useEffect(() => {\n\n        const fetchDataByTitle = async () => {\n            const { data: movie } = await axios.get(`${API_TITLE_ENPOINT}+${batch[0].title}`)\n\n            if (apiData === initValue) {\n                apiData.shift();\n                console.log(\"Shifting\");\n            }\n\n            setApiData([...apiData, movie]);\n            const res = compareData(movie, MovieDB);\n            setProcessLog(compareData(movie, MovieDB));\n\n            console.log(\"Our current overall state\", apiData);\n            console.log(\"Our current state in map\", movie);\n            console.log(\"Title is \", batch[0].title );\n            console.log(\"Testing results\", res.positive.length);\n        }\n        \n        fetchDataByTitle();\n        setPayloadData(MovieDB);\n    }, [])\n\n\n    const processDataComparison = (batch:any, payload:any) => {\n        const results = compareData(payload, batch);\n        console.log(\"These are the results from comparison: \", results);\n\n        return results;\n    }\n\n\n    const manageDisplay = () => {\n        let counter = 1;\n        return(\n            <>\n                <Grid container alignItems=\"center\" justify=\"center\">\n                    <Paper className={classes.paperRoot}>\n                        <Grid item lg={8}>\n                            <Table>\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell align=\"left\">Movie Title</TableCell>\n                                        <TableCell align=\"left\">Positive Matches</TableCell>\n                                        <TableCell align=\"left\">Mismatches</TableCell>\n                                        <TableCell align=\"right\"></TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {/* {() =>} */}\n                                    {apiData.map((listing: any, i:number) => (\n                                        <TableRow key={i}>\n                                            <TableCell align=\"left\" key={i}>{listing.Title}</TableCell>\n                                            <TableCell align=\"left\" key={i}>{processLog.positive.length}</TableCell>\n                                            <TableCell align=\"left\" key={i}>{processLog.negative.length}</TableCell>\n                                            <TableCell align=\"right\">\n                                                <Button onClick={() => console.log(\"inspecting the following: \", listing.imdbID)}>\n                                                    Inspect\n                                                </Button>\n                                            </TableCell>\n                                        </TableRow>\n                                        \n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </Grid>\n                    </Paper>\n                </Grid>\n            \n            </>\n        );\n        \n    }\n\n    \n    return(\n        <div>\n            <h1 className={classes.headerLabel}>Data Processing</h1>\n            <h3>Movie from IMDB: </h3>\n            <p>{JSON.stringify(apiData)}</p>\n            <br></br>\n            <br></br>\n            <h3>Movie from Payload:</h3>\n            <p>{JSON.stringify(MovieDB)}</p>\n            <br></br>\n            <br></br>\n            <h3>Comparing Data:</h3>\n            {manageDisplay()}\n        </div>\n    );\n}\n\nexport default withStyles(styles)(Report);"]},"metadata":{},"sourceType":"module"}