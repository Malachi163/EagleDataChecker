{"ast":null,"code":"import _slicedToArray from \"/Users/alexander.rivera@ibm.com/Documents/SoftwareDev/eagle-prime-demo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/alexander.rivera@ibm.com/Documents/SoftwareDev/eagle-prime-demo/src/components/Report.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieDB from '../data/db';\nimport { compareData } from '../data/moviePayload';\nimport { withStyles, Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport styles from './report.styles';\nconst API_TITLE_ENPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&t=\";\nconst API_ID_ENDPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&i=\";\n\nconst Report = props => {\n  const initValue = [{}];\n\n  const _useState = useState(initValue),\n        _useState2 = _slicedToArray(_useState, 2),\n        apiData = _useState2[0],\n        setApiData = _useState2[1]; // Defines the data pulled from IMDB through the batch given\n\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        payloadData = _useState4[0],\n        setPayloadData = _useState4[1]; // Defines the data given through Amazon Payload\n\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        processLog = _useState6[0],\n        setProcessLog = _useState6[1];\n\n  const classes = props.classes;\n  const batch = props.batch;\n\n  const fetchMovieByTitle = async batch => {};\n\n  const fetchMovieById = async (batch, endpoint) => {\n    let response = [];\n    const movies = batch.map(async title => {\n      console.log('Movie title being searched: ', title.title);\n      console.log('Our initial value is: ', apiData);\n      const res = await axios.get(\"\".concat(endpoint, \"+\").concat(title.title)).then(response => {\n        setApiData([...apiData, response.data]);\n        console.log(\"Finished loading\", response.data);\n        processDataComparison(response.data, MovieDB);\n      }); // Needs to be changed to acommodate for array in apiData\n    });\n    return movies;\n  };\n\n  const processDataComparison = (batch, payload) => {\n    const results = compareData(payload, batch);\n    console.log(\"These are the results from comparison: \", results);\n    return results;\n  };\n\n  const fetchMovieFromPayload = title => {};\n\n  const pushToState = (prevState, newItem) => {};\n\n  const manageDisplay = async () => {};\n\n  useEffect(() => {\n    fetchMovieById(batch, API_TITLE_ENPOINT);\n    setPayloadData(MovieDB);\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: classes.headerLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Data Processing\"), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Movie from IMDB: \"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, JSON.stringify(apiData)), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Movie from Payload:\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, JSON.stringify(MovieDB)), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Comparing Data:\"), React.createElement(Grid, {\n    container: true,\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    lg: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Movie Title\"), React.createElement(TableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Positive Matches\"), React.createElement(TableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Mismatches\"))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, apiData.map(listing => React.createElement(TableRow, {\n    key: listing.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, listing.title))))))), React.createElement(Button, {\n    onClick: () => setProcessLog(processDataComparison(apiData, MovieDB)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Compare\"));\n};\n\nexport default withStyles(styles)(Report);","map":{"version":3,"sources":["/Users/alexander.rivera@ibm.com/Documents/SoftwareDev/eagle-prime-demo/src/components/Report.tsx"],"names":["React","useState","useEffect","axios","MovieDB","compareData","withStyles","Button","Grid","Table","TableBody","TableHead","TableRow","TableCell","styles","API_TITLE_ENPOINT","API_ID_ENDPOINT","Report","props","initValue","apiData","setApiData","payloadData","setPayloadData","processLog","setProcessLog","classes","batch","fetchMovieByTitle","fetchMovieById","endpoint","response","movies","map","title","console","log","res","get","then","data","processDataComparison","payload","results","fetchMovieFromPayload","pushToState","prevState","newItem","manageDisplay","headerLabel","JSON","stringify","listing"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport ReportForm from './ReportForm';\nimport axios from 'axios';\nimport MovieDB from '../data/db';\nimport {compareData} from '../data/moviePayload';\nimport {withStyles, Button} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport styles from './report.styles';\n\nconst API_TITLE_ENPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&t=\";\nconst API_ID_ENDPOINT = \"http://www.omdbapi.com/?apikey=e60c4b4a&&i=\";\n\nconst Report = (props:any) => {\n    const initValue = [\n        {}\n    ];\n\n    const [apiData, setApiData] = useState(initValue); // Defines the data pulled from IMDB through the batch given\n    const [payloadData, setPayloadData] = useState(); // Defines the data given through Amazon Payload\n    const [processLog, setProcessLog] = useState();\n    const {classes} = props;\n    const {batch} = props;\n\n    const fetchMovieByTitle = async (batch:any) => {\n\n    }\n\n    const fetchMovieById = async (batch:any, endpoint:string) => {\n        let response: any[] = [];\n        const movies = batch.map(async (title:any) => {\n            console.log('Movie title being searched: ', title.title);\n            console.log('Our initial value is: ', apiData);\n            const res = await axios.get(`${endpoint}+${title.title}`).then(response => {\n                setApiData([...apiData, response.data]);\n                console.log(\"Finished loading\", response.data);\n                processDataComparison(response.data, MovieDB)\n            }); // Needs to be changed to acommodate for array in apiData\n        })\n        \n        return movies;\n    }\n\n    const processDataComparison = (batch:any, payload:any) => {\n        const results = compareData(payload, batch);\n        console.log(\"These are the results from comparison: \", results);\n\n        return results;\n    }\n\n    const fetchMovieFromPayload = (title:string)=> {\n\n    }\n\n    const pushToState = (prevState:any, newItem:any) => {\n\n    } \n\n    const manageDisplay = async () => {\n\n    }\n\n\n    useEffect(() => {\n       fetchMovieById(batch, API_TITLE_ENPOINT);\n       setPayloadData(MovieDB);\n    }, [])\n\n    \n    return(\n        <div>\n            <h1 className={classes.headerLabel}>Data Processing</h1>\n            <h3>Movie from IMDB: </h3>\n            <p>{JSON.stringify(apiData)}</p>\n            <br></br>\n            <br></br>\n            <h3>Movie from Payload:</h3>\n            <p>{JSON.stringify(MovieDB)}</p>\n            <br></br>\n            <br></br>\n            <h3>Comparing Data:</h3>\n            <Grid container alignItems=\"center\">\n                <Grid item lg={6}>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"left\">Movie Title</TableCell>\n                                <TableCell align=\"left\">Positive Matches</TableCell>\n                                <TableCell align=\"left\">Mismatches</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {apiData.map((listing:any) => (\n                                <TableRow key={listing.title}>\n                                    <TableCell align=\"left\">{listing.title}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Grid>\n            </Grid>\n            <Button onClick={() => setProcessLog(processDataComparison(apiData, MovieDB))}>Compare</Button>\n        </div>\n    );\n}\n\nexport default withStyles(styles)(Report);"]},"metadata":{},"sourceType":"module"}